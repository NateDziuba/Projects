Index: DLS_Files/main loader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ---- Import Zone ----\n\nimport tkinter as tk\nfrom tkinter import filedialog\nfrom pathlib import Path\nimport pandas as pd\nimport numpy as np\nimport os as os\nimport csv\nimport xlsxwriter\n\n# ---- Global Variable Zone ----\n# Fil path selection storage location\n\n\n# Used in FileSet() function to store the file path of the selected file.\nfile_path = None\n\n\ndef main_menu():\n    \"\"\"Main menu to make selections from.\"\"\"\n    print(\n        \"Main Menu\\n\"\n        \"---------\\n\"\n        \"0 - Terminate Program.\\n\"\n        \"1 - Template Generation.\\n\"\n        \"2 - Data Analysis.\\n\"\n        \"3 - Select working file. \\n\"\n        \"4 - Print working file-filepath in terminal.\\n\\n\"\n    )\n\n#TODO make the Fileset as a class so it can also return the folder to store data in\ndef FileSet():\n    \"\"\"Function asks the user for a file path. This filepath is then stored as a global variable for future use.\"\"\"\n    global file_path\n\n    if file_path is None:\n        # While function loops until a csv file is selected or end has been input to go to the main menu.\n        while True:\n            print(\"Please select a CSV file for data analysis.\\n\")\n            input(\"Please press any key to continue...\\n\")\n\n            root = tk.Tk()\n            root.withdraw()\n\n            file_path = filedialog.askopenfilename()\n            file_extension = file_path[-3:]\n            print(\"---- File has been selected, analyzing for file type.---- \\n\")\n\n            if Path(file_path).suffix == \".csv\":  # Checks if selected file is a csv extension.\n                print(\"---File Type is CSV---\\n\")\n                break\n            else:\n                print(\"A CSV file was not selected. Please select a csv file for analysis.\\n\")\n                request_pause = input(\"Please press any key to continue or type end to go to main menu.\\n\\n\").lower()\n                if request_pause == \"end\":\n                    pass\n    else:\n        # Needed during analysis. File path selection is run automatically, because users...\n        while True:\n            print(\"Is this the correct file for data analysis?\\n\", file_path)\n            request2 = input(\"Please press enter Yes or No. \\n\").lower()\n\n            if request2 == \"yes\":\n                break\n\n            if request2 == \"no\":\n                root = tk.Tk()\n                root.withdraw()\n\n                file_path = filedialog.askopenfilename()\n                file_extension = file_path[-3:]\n                print(\"---- File has been selected, analyzing for file type.---- \\n\")\n\n            if Path(file_path).suffix == \".csv\":  # Checks if selected file is a csv extension.\n                print(\"----File is a csv extension. Accepting file path.----\\n\")\n                break\n            else:\n                print(\"----A CSV file was not selected. Please select a csv file for analysis.----\\n\")\n                request_pause = input(\"Please press any key to continue or type \\\"END\\\" to go to the main menu.\\n\\n\").lower()\n                if request_pause == \"end\":\n                    break\n    return file_path\n\n\n# Function determines if the current filepath contains the data of interest, if not it requests\n# a direct filepath from the user to use for analysis.\n\n\ndef directorychange():\n    \"\"\"Function runs the FileSet function, in case the use goes to data analysis without setting the csv file.\"\"\"\n    global file_path\n    if file_path is None:\n        FileSet()\n    else:\n        pass\n\n\n# Initializes the data frame. Returns the dataframe.\ndef init_dataframe():\n    \"\"\"Initalizes the data frame that will be used later on in the analysis.\"\"\"\n    global file_path\n    print('\\n\\n Initializing Dataframe... Using filepath: \\n', file_path, \"\\n\")\n    initdframe = pd.read_csv(file_path, encoding='cp1252')\n    print(\"\\nDataframe created and loaded. Displaying full dataframe...\\n\", initdframe)\n    return initdframe\n\nclass Col_Header:\n    def __init__(self, dframe, headings = None):\n        self.df = dframe\n        self.headings = headings.lower()\n        self.heading_list = None\n        self.all_headers = self.list_make()\n        if self.headings == \"help\":\n            self.help()\n        elif self.headings == None:\n            return all_headers\n        if self.headings == \"sort\":\n            self.numeric_only()\n\n    def list_make(self):\n        self.heading_list = list(self.df)\n\n    def numeric_only(self):\n        self.numeric_list = [\"Normalized Intensity (Cnt/s)\", \"Dilution Factor\",\"Amplitude\", \"Baseline\", \"SOS\",\n                             'D10 (nm)', 'D50 (nm)', 'D90 (nm)', 'Span (D90 - D10)/D50',\n                             \"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\", \"Number Marked Acqs\"]\n        reg_list = self.reg()\n\n        [self.numeric_list.append(i) for i in reg_list]\n\n        return self.numeric_list\n\n\n\n    def base(self):\n        base_list = [\"Well\", \"Sample\", \"Lot Number\", \"Normalized Intensity (Cnt/s)\", \"Dilution Factor\",\n                        \"Amplitude\", \"Baseline\", \"SOS\",  \"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\",\n                        \"Number Marked Acqs\", \"Item\", \"Date\", \"Time Stamp\"]\n        return base_list\n\n    def cume(self):\n        self.cume_list = [\"Well\", \"Sample\", \"Lot Number\", \"Normalized Intensity (Cnt/s)\", \"Dilution Factor\", \"Diameter (nm)\",\n                                \"Amplitude\", \"Baseline\", \"SOS\", \"%PD\", 'D10 (nm)', 'D50 (nm)', 'D90 (nm)', 'Span (D90 - D10)/D50',\n                                \"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\", \"Number Marked Acqs\", \"Item\",\n                                \"Date\", \"Time Stamp\"]\n        return self.cume_list\n\n    def num_reg(self):\n        self.reg_list = []\n        ranges = [\"Range1\", \"Range2\", \"Range3\", \"Range4\", \"Range5\"]\n        self.range_list =[]\n        [self.range_list.append(j) for i in ranges for j in self.heading_list if j.startswith(i) ]\n        [self.reg_list.append(i) for i in range_list]\n\n        return self.reg_list\n\n    def reg(self):\n        reg_list = []\n        ranges = [\"Range1\", \"Range2\", \"Range3\", \"Range4\", \"Range5\"]\n        range_list =[]\n        [range_list.append(j) for i in ranges for j in self.heading_list if j.startswith(i) ]\n        base = self.base()\n        [reg_list.append(i) for i in base]\n        [reg_list.append(i) for i in range_list]\n\n        return reg_list\n\n    def help(self):\n        print(\"First argument is the dataframe.\\n The second argument can be:\\n \"\n              \"1. sort\\n\"\n              \"2. cume\\n\"\n              \"3. reg\\n\"\n              \"4. other\\n\")\n\n\n\ndef sort_dataframe(dframe):\n    \"\"\"Performs an initial sort of the dataframe into the core and required columns.\"\"\"\n    #TODO write an exception block for this range in case the user does not use dilution factors in the template\n    print(\"\\n\\n Sort Dataframe initiated...\\n\")\n    main_list = Col_Header(dframe, \"sort\")\n    print(\"Printing main_list   :   \", main_list )\n    #df_sorted = dframe[[\"Well\", \"Sample\", \"Lot Number\", \"Normalized Intensity (Cnt/s)\", \"Dilution Factor\",\n                        #\"Diameter (nm)\", \"Amplitude\", \"Baseline\", \"SOS\", \"%PD\",\n                        #\"Range1 Diameter (I) (nm)\", \"Range1 %Pd (I)\", \"Range1 %Number (I)\",\n                        #\"Range2 Diameter (I) (nm)\", \"Range2 %Pd (I)\", \"Range2 %Number (I)\",\n                        #\"Range3 Diameter (I) (nm)\", \"Range3 %Pd (I)\", \"Range3 %Number (I)\",\n                        #\"Range4 Diameter (I) (nm)\", \"Range4 %Pd (I)\", \"Range4 %Number (I)\",\n                        #\"Range5 Diameter (I) (nm)\", \"Range5 %Pd (I)\", \"Range5 %Number (I)\",\n                        #\"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\", \"Number Marked Acqs\", \"Item\",\n                        #\"Date\", \"Time Stamp\"\n                        #]].replace(\"--\", np.NaN, regex=False).replace(\"\", np.NaN, regex=False)\n    \n    df_sorted = dframe[main_list].replace(\"--\", np.NaN, regex=Fale).replace(\"\", np.Nan, regex=False)\n\n    df_sorted[[\"Range1 Diameter (I) (nm)\", \"Range1 %Pd (I)\", \"Range1 %Number (I)\", \"Range1 %Intensity\"\n    \"Range2 Diameter (I) (nm)\", \"Range2 %Pd (I)\", \"Range2 %Number (I)\",\n    \"Range3 Diameter (I) (nm)\", \"Range3 %Pd (I)\", \"Range3 %Number (I)\",\n    \"Range4 Diameter (I) (nm)\", \"Range4 %Pd (I)\", \"Range4 %Number (I)\",\n    \"Range5 Diameter (I) (nm)\", \"Range5 %Pd (I)\", \"Range5 %Number (I)\"]]\\\n    = df_sorted[[\"Range1 Diameter (I) (nm)\", \"Range1 %Pd (I)\", \"Range1 %Number (I)\",\n    \"Range2 Diameter (I) (nm)\", \"Range2 %Pd (I)\", \"Range2 %Number (I)\",\n    \"Range3 Diameter (I) (nm)\", \"Range3 %Pd (I)\", \"Range3 %Number (I)\",\n    \"Range4 Diameter (I) (nm)\", \"Range4 %Pd (I)\", \"Range4 %Number (I)\",\n    \"Range5 Diameter (I) (nm)\", \"Range5 %Pd (I)\", \"Range5 %Number (I)\"]].astype(\"float\")\n    \n    print(\"df_sorted :    \", df_sorted.dtypes)\n    print(\"Dataframe has been sorted, displaying: \\n\", df_sorted)\n    return df_sorted\n\ndef filter_parameters():\n    \"\"\"place holder function that will be used o ask and store filter parameter variables during analysis\"\"\"\n    #TODO complete this function and a new menu selection for data analysis, probably make into a class.\n    baseline_lower = 0.99\n    baseline_upper = 1.01\n    sos = 25\n    amplitude_limit = 0.1\n    percent_acqs_unmarked = 70\n    relative_std = 5\n    replicate_size = 3\n\ndef norm_init(dframe):\n    \"\"\"Generates the data filtered dataframe\"\"\"\n\n    def PRsd(x):\n        return (x.std() / x.mean()) * 100\n    print(\"\\n Initiatiing parameter filter:...\\n\\n\")\n    # Variable for the filtered data from df_sorted\n    df_filtered = dframe[(dframe['Baseline'] >= 0.99) & (dframe['Baseline'] <= 1.01) & (dframe['SOS'] <= 25)\n                         & (dframe['Amplitude'] >= 0.1) & (dframe['% Acqs Unmarked'] >= 70)]\n\n    # Sorted results  by sample, then dilution factor and calculated basic statistic values for the described values\n    df_NI = df_filtered.groupby([\"Lot Number\", 'Dilution Factor']).agg(\n        {'Normalized Intensity (Cnt/s)': ['size', 'mean', 'std', PRsd]}).reset_index().copy()\n\n    # %RSD is set and needs to be at or lower than the provided value\n    # and the size (the number of grouped dilution factors) needs to be 3.\n    df_rsd = df_NI[\n        (df_NI['Normalized Intensity (Cnt/s)', \"PRsd\"] <= 20) & (df_NI['Normalized Intensity (Cnt/s)', 'size'] == 3)]\n    #print(\"df_filtered\", df_filtered)\n    #print(\"df_NI\", df_NI)\n    print(\"\\n\\n Filtered and grouped dataset finished, loading df_rsd: ....\\n\\n\", df_rsd)\n    #return df_rsd.loc[:, (['Sample', 'Dilution Factor', 'Normalized Intensity (Cnt/s)'], [\"\", 'mean'])]\n\n\n    return df_rsd\n\ndef select_samples(dframe):\n    \"\"\" This function uses the sorted data frame and the list of selected samples. The list is used to iterate through\n    the sorted dataframe and the selected samples are evaluated accordingly. The dataframe that should be used as an\n    argument should be the norm int \"\"\"\n    # Makes a list of lists of sample names and dilution factors that pass the above tests, exports into numpy.\n    snamer = []\n    num_rsd = dframe.to_numpy()\n    [snamer.append([i[0], i[1]]) for i in num_rsd if [i[0], i[1]] not in snamer]\n    print(num_rsd)\n    print(snamer)\n\n    a = snamer\n    df = dframe\n    df_index = df.set_index([\"Lot Number\", \"Dilution Factor\"], drop=True)\n    print (\"Printing df_index: \", df_index)\n    verified_list = []\n    output_list = []\n    list_len = len(a)\n\n    pos1 = 0\n    pos2 = 1\n\n    # for loop initiates iteration over list length.\n    for i in range(list_len):\n        if pos2 < list_len:  # Check to prevent an index error.\n            if a[pos1][0] == a[pos2][0]:  # checks it the sample names are the same\n                fold = a[pos1][1] / a[pos2][1]\n                if fold == 0.5 or fold == 2:  # Confirms if the dilution factor fold difference are correct and begins extracting normalized intensity counts.\n                    comparison1 = df_index.loc[(a[pos1][0], a[pos1][1]), ('Normalized Intensity (Cnt/s)', 'mean')]\n                    print(\"Printing Comp1: \", comparison1)\n                    #The above line of code returns the sample and dilution factor index values, and then the position of the remaining column.\n                    #excluding a column value for norm. Int. appears to be syntactic sugar to including a ':'(splice value).\n                    comparison2 = df_index.loc[(a[pos2][0], a[pos2][1]), ('Normalized Intensity (Cnt/s)', 'mean')]\n                    comp_fold = comparison1/comparison2\n                    if 1.5 <= comp_fold <= 2.5:  # if norm intensity fold difference is within 2 +/- 25%, append to a new list\n                        verified_list.append([a[pos1][0], a[pos1][1], comparison1])\n                        verified_list.append([a[pos2][0], a[pos2][1], comparison2])\n            pos1 += 1\n            pos2 += 1\n        else:\n            print(\"\\nList scan finished, generating master list.\")\n            # A new list is generated without repeats.\n            [output_list.append(i) for i in verified_list if i not in output_list]\n\n\n    print('\\n Printing Output List: ', output_list)\n    print(\"\\n Printing initial list: \", a)\n    print(\"\\n Prining verified list: \", verified_list, \"\\n\\n\")\n    return output_list\n\ndef cum_reg_report(list, dframe):\n    \"\"\"Function takes a list of lists that contain the sample name, dilution factor, and normalized intensity\n    that have passed assay acceptance criteria. This list is used to pull cummulant or regularization values and\n    generates basic statistics on it.The second arg is the sorted dataframe. Use the verified list from the \n    select samples function. Use the sorted data frame from sort_dataframe function.\"\"\"\n    global file_path\n    print(\"printing file path: \", file_path)\n    foldersave = \"\"\n\n    # 'C:/Users/NDziuba/OneDrive - FUJIFILM/VAD/VAD/Innovation/Projects/DLS_Files/outputExcel.xlsx'\n\n    for i in range(len(file_path)):\n        if file_path[-(i+1):len(file_path)-i] == '/':\n            foldersave = file_path[:-i] + \"DLS_Output\"\n            print('File Path if statement passed...')\n            print(\"Folder Save:   \", foldersave)\n            break\n    print(\"printing folder save path\", foldersave)\n    accepted_values = list\n    df_sorted = dframe\n    df_index = df_sorted.set_index([\"Lot Number\", \"Dilution Factor\"], drop=False)\n    dfidx_sort = df_index.sort_index()\n    \n    writer = pd.ExcelWriter(\"DLS_Results_Output_pius.xlsx\", engine='xlsxwriter')\n    #workbook = writer.book\n    #worksheet = workbook.sheets\n    \n    empty = pd.DataFrame()\n    empty.to_excel(writer, sheet_name='DLS Results')\n    row_counter = 0\n    \n    \n    for i in range(len(accepted_values)):\n        idx1 = accepted_values[i][0] #is sample name\n        idx2 = accepted_values[i][1] #is dilution factor\n        slct_df = dfidx_sort.loc[(idx1, idx2), :]\n        if slct_df.mean(axis=0, numeric_only=True)[\"%PD\"] <= 15.0:\n            #Save the data, the triplicate rows and the descriptives, to an excel sheet \n            #with pd.ExcelWriter(foldersave, engine='xlsxwriter') as writer:\n            cume = slct_df[[\"Well\", \"Sample\", \"Lot Number\", \"Normalized Intensity (Cnt/s)\", \"Dilution Factor\", \"Diameter (nm)\",\n                                \"Amplitude\", \"Baseline\", \"SOS\", \"%PD\",\n                                \"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\", \"Number Marked Acqs\", \"Item\",\n                                \"Date\", \"Time Stamp\"\n                                ]]\n            cume.to_excel(writer, sheet_name='DLS Results', startrow = row_counter)\n            row_counter = row_counter + len(cume.index) + 2\n            cume_stat = cume.describe(include=[np.number])\n            \n            cume_stat.to_excel(writer, sheet_name='DLS Results', startrow = row_counter)\n            row_counter = row_counter + len(cume_stat.index) + 3\n        else:\n            \n            #workbook = writer.book\n            #worksheet = writer.sheets['DLS Results']\n            cume = slct_df[[\"Well\", \"Sample\", \"Lot Number\", \"Normalized Intensity (Cnt/s)\", \"Dilution Factor\", \"Diameter (nm)\",\n                                \"Amplitude\", \"Baseline\", \"SOS\", \"%PD\",\n                                \"Range1 Diameter (I) (nm)\", \"Range1 %Pd (I)\", \"Range1 %Number (I)\",\n                                \"Range2 Diameter (I) (nm)\", \"Range2 %Pd (I)\", \"Range2 %Number (I)\",\n                                \"Range3 Diameter (I) (nm)\", \"Range3 %Pd (I)\", \"Range3 %Number (I)\",\n                                \"Range4 Diameter (I) (nm)\", \"Range4 %Pd (I)\", \"Range4 %Number (I)\",\n                                \"Range5 Diameter (I) (nm)\", \"Range5 %Pd (I)\", \"Range5 %Number (I)\",\n                                \"Number Acqs\", \"% Acqs Unmarked\", \"Number Acqs\", \"Number Marked Acqs\", \"Item\",\n                                \"Date\", \"Time Stamp\"\n                                ]]\n            print(\"printing Cume:.... \", cume)\n            \n            cume.to_excel(writer, sheet_name='DLS Results', startrow = row_counter)\n            row_counter = row_counter + len(cume.index) + 2\n            print(\"\\n\\n data type\", cume.dtypes)\n            \n            cume_stat = cume.describe(include='all') \n            cume_stat.to_excel(writer, sheet_name='DLS Results', startrow = row_counter, startcol = 1)\n            row_counter = row_counter + len(cume_stat.index) + 3\n            \n            \n        \n        #print(slct_df)\n        #print(slct_df.describe())\n    writer.close()\n\n\ndef TemplateGenerator():\n    print(\"Template Generator function activated.\")\n\n\ndef main():\n    \"\"\" The main function that prompts the user to make a selection of a task they would like to perform.\"\"\"\n    global file_path\n    file_path = \"/Users/natedziuba/Library/Mobile Documents/com~apple~CloudDocs/Computer Science/Python/Repos/DLS_Files/DLSTrainingRAW 2.csv\"\n    #file_path = \"/Users/NDziuba/OneDrive - FUJIFILM/VAD/VAD/Innovation/Projects/DLS_Files/DLSTrainingRAW 2.csv\"\n    # Initiation of the prompt.\n    print(\"Welcome to the DLS Python script, please select an option below.\\n\")\n    # Loops to allow the user to select an option, and requires only int.\n    while True:\n        main_menu()\n\n        try:\n            request = int(input(\"Make a selection from the table above.\\n\\n\"))\n        except ValueError:\n            print(\"Your input is incorrect. Make a selection from 0-3.\\n\")\n            continue\n        if request == 1:\n            TemplateGenerator()\n        elif request == 2:\n            directorychange()\n            df = init_dataframe()\n            df_sort = sort_dataframe(df)\n            filtered = norm_init(df_sort)\n            verified_list = select_samples(filtered)\n            cum_reg_report(verified_list, df_sort)\n\n        elif request == 3:\n            FileSet()\n        elif request == 4:\n            print(\"The filepath is: \\n\", file_path, \"\\n\\n\")\n        elif request == 0:\n            print(\"Thank-you for using the DLS python program.\\n\\n\")\n            break\n        else:\n            print(\"Invalid choice. \\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DLS_Files/main loader.py b/DLS_Files/main loader.py
--- a/DLS_Files/main loader.py	(revision 23074f582d992eaae076bbe6f1b55bb37f0da13b)
+++ b/DLS_Files/main loader.py	(date 1701233249420)
@@ -114,7 +114,7 @@
         if self.headings == "help":
             self.help()
         elif self.headings == None:
-            return all_headers
+            return self.all_headers
         if self.headings == "sort":
             self.numeric_only()
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"SCOPE_TYPE\" value=\"3\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"4551ffee-8a78-45bd-91f3-584fdb7c5791\" name=\"Changes\" comment=\"generating folder safe and report to excel function.\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/DLS_Files/main loader.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DLS_Files/main loader.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Merge.Settings\">\n    <option name=\"BRANCH\" value=\"origin/Development-01\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$APPLICATION_CONFIG_DIR$/scratches/scratch.py\" root0=\"SKIP_HIGHLIGHTING\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2Xpb34yj6FuUENHTMsUI0LSZF3n\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File\" value=\"Python\" />\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"aDefault\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.buildout.BuildoutModulesConfigurable\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Python.main loader\">\n    <configuration name=\"main loader\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Projects\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/local/bin/python3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/DLS_Files\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/DLS_Files/main loader.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"scratch\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Projects\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/local/bin/python3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$APPLICATION_CONFIG_DIR$/scratches\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$APPLICATION_CONFIG_DIR$/scratches/scratch.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"scratch_2\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Projects\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/local/bin/python3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$APPLICATION_CONFIG_DIR$/scratches\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$APPLICATION_CONFIG_DIR$/scratches/scratch_2.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"scratch_3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Projects\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/local/bin/python3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$APPLICATION_CONFIG_DIR$/scratches\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$APPLICATION_CONFIG_DIR$/scratches/scratch_3.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.main loader\" />\n        <item itemvalue=\"Python.scratch_3\" />\n        <item itemvalue=\"Python.scratch\" />\n        <item itemvalue=\"Python.scratch_2\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"4551ffee-8a78-45bd-91f3-584fdb7c5791\" name=\"Changes\" comment=\"\" />\n      <created>1699328765503</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1699328765503</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"vcs comit and push\">\n      <created>1699328852225</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699328852225</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Commit directory.\">\n      <created>1699329367990</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699329367990</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Commit directory.\">\n      <created>1699329398437</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699329398437</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Main file for DLS script added to the repo.\">\n      <created>1699330718453</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699330718453</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"updated dataanalysis class.\">\n      <created>1699336088928</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699336088928</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"updated dataanalysis class.\">\n      <created>1699499545328</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699499545329</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Data analysis updated.\">\n      <created>1699500468060</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699500468060</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Data analysis updated.\">\n      <created>1699563248485</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699563248485</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Data analysis updated.\">\n      <created>1699578902842</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699578902842</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Data analysis updated. Updated to pulling the norm int for analysis.\">\n      <created>1699820315342</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699820315342</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Norm Int analysis competed, list generated.\">\n      <created>1699835515917</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699835515917</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Norm Int analysis competed, list generated.\">\n      <created>1699837915975</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699837915975</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Started generating cu and reg report.\">\n      <created>1699844580363</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1699844580363</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Updated main loader. &#10;&#10;Worked on consolidating the template generater function for the main loader. Finihed HeaderGen, Wells. Continue with samplename.\">\n      <created>1700107564216</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700107564216</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Updated main loader. &#10;&#10;Worked on consolidating the template generater function for the main loader. Finihed HeaderGen, Wells. Continue with samplename.\">\n      <created>1700107631388</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700107631388</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Updated main loader. &#10;&#10;Worked on consolidating the template generater function for the main loader. Finihed HeaderGen, Wells. Continue with samplename.\">\n      <created>1700107958695</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700107958695</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"generating folder safe and report to excel function.\">\n      <created>1700200071313</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700200071313</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"18\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"main\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"vcs comit and push\" />\n    <MESSAGE value=\"Commit directory.\" />\n    <MESSAGE value=\"Renamed folder to not be hidden.\" />\n    <MESSAGE value=\"Main file for DLS script added to the repo.\" />\n    <MESSAGE value=\"updated dataanalysis class.\" />\n    <MESSAGE value=\"Data analysis updated.\" />\n    <MESSAGE value=\"Data analysis updated. Updated to pulling the norm int for analysis.\" />\n    <MESSAGE value=\"Norm Int analysis competed, list generated.\" />\n    <MESSAGE value=\"Started generating cu and reg report.\" />\n    <MESSAGE value=\"Updated main loader. &#10;&#10;Worked on consolidating the template generater function for the main loader. Finihed HeaderGen, Wells. Continue with samplename.\" />\n    <MESSAGE value=\"generating folder safe and report to excel function.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"generating folder safe and report to excel function.\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$APPLICATION_CONFIG_DIR$/scratches/scratch_3.py</url>\n          <line>7</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 23074f582d992eaae076bbe6f1b55bb37f0da13b)
+++ b/.idea/workspace.xml	(date 1701233768477)
@@ -7,7 +7,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4551ffee-8a78-45bd-91f3-584fdb7c5791" name="Changes" comment="generating folder safe and report to excel function.">
+    <list default="true" id="4551ffee-8a78-45bd-91f3-584fdb7c5791" name="Changes" comment="updated class">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/DLS_Files/main loader.py" beforeDir="false" afterPath="$PROJECT_DIR$/DLS_Files/main loader.py" afterDir="false" />
     </list>
@@ -33,6 +33,9 @@
   <component name="HighlightingSettingsPerFile">
     <setting file="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.py" root0="SKIP_HIGHLIGHTING" />
   </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "associatedIndex": 4
+}]]></component>
   <component name="ProjectId" id="2Xpb34yj6FuUENHTMsUI0LSZF3n" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -268,7 +271,14 @@
       <option name="project" value="LOCAL" />
       <updated>1700200071313</updated>
     </task>
-    <option name="localTasksCounter" value="18" />
+    <task id="LOCAL-00018" summary="updated class">
+      <created>1701185086833</created>
+      <option name="number" value="00018" />
+      <option name="presentableId" value="LOCAL-00018" />
+      <option name="project" value="LOCAL" />
+      <updated>1701185086833</updated>
+    </task>
+    <option name="localTasksCounter" value="19" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -293,7 +303,6 @@
         </entry>
       </map>
     </option>
-    <option name="oldMeFiltersMigrated" value="true" />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="vcs comit and push" />
@@ -307,7 +316,8 @@
     <MESSAGE value="Started generating cu and reg report." />
     <MESSAGE value="Updated main loader. &#10;&#10;Worked on consolidating the template generater function for the main loader. Finihed HeaderGen, Wells. Continue with samplename." />
     <MESSAGE value="generating folder safe and report to excel function." />
-    <option name="LAST_COMMIT_MESSAGE" value="generating folder safe and report to excel function." />
+    <MESSAGE value="updated class" />
+    <option name="LAST_COMMIT_MESSAGE" value="updated class" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
